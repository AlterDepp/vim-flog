*flog.txt*  A git branch viewer for Vim
Flog                                                                    *flog*

Author:  Roger Bongers <https://github.com/rbong>
License: Same terms as Vim itself (see |license|)

==============================================================================
INTRODUCTION                                                      *flog-intro*

Flog is a lightweight git branch viewer for Vim. It provides several helpful
commands and mappings to interact with the graph.


==============================================================================
PREREQUISITES                                                   *flog-prereqs*

Flog supports Vim 8, Vim 9, and Neovim.

Flog requires the |fugitive| plugin to be installed.

In Vim 8/9, Flog requires LuaJIT 2.1 to be installed on the system.

See also |g:flog_lua_bin|, |g:flog_use_internal_lua|,
|g:flog_check_lua_version|.

==============================================================================
COMMANDS                                                       *flog-commands*

:Flog                                                                  *:Flog*

  Open the log graph in a new tab. This command can be run from any file in a
  git repository. Any |fugitive-commands| can be run from the buffer.

  When opened in visual mode or passed a range, the currently selected range
  and filename is passed to "-limit=".

  The first time this is called, runs "git commit-graph write". This can be
  changed with |g:flog_write_commit_graph|.

  The following options are supported:

  -all -no-all                                      *:Flog-all* *:Flog-no-all*

    When enabled, pass the "--all" argument to "git log".
    Disabled when |:Flog-limit| is set.
    Disabled by default.

  -bisect -no-bisect                          *:Flog-bisect* *:Flog-no-bisect*

    When enabled, pass the "--bisect" argument to "git log".
    Disabled by default.

  -merges -no-merges                          *:Flog-merges* *:Flog-no-merges*

    When disabled, pass the "--no-merges" argument to "git log".
    Enabled by default.

  -reflog -no-reflog                          *:Flog-reflog* *:Flog-no-reflog*

    When enabled, pass the "--reflog" argument to "git log".
    Disabled by default.

  -reverse -no-reverse                      *:Flog-reverse* *:Flog-no-reverse*

    When enabled, pass the "--reverse" argument to "git log".
    Requires |:Flog-no-graph|.
    Disabled by default.

  -patch -no-patch                              *:Flog-patch* *:Flog-no-patch*

    When disabled, pass the "--no-patch" argument to "git log".
    Enabled by default.

  -graph -no-graph                              *:Flog-graph* *:Flog-no-graph*

    When disabled, do not draw the commit graph.
    The graph cannot be drawn when |:Flog-reverse| is set.
    Enabled by default.

  -author=<author>                                              *:Flog-author*

    Passes the "--author=<author>" argument to "git log".

  -date=<date>                                                    *:Flog-date*

    Passes the "--date=<date>" argument to "git log".
    All named formats are supported.

  -format=<format>                                              *:Flog-format*

    Passes the "--pretty=format:<format>" argument to "git log".
    Multiline formats are supported.

    To support highlighting, special items should go at the start.
    This includes date, hash, author, and refs.

  -limit=<limit>                                                 *:Flog-limit*

    Passes the "-L=<limit>" argument to "git log".
    The patch displayed can be disabled with |:Flog-no-patch|.

    You can also specify this argument by passing a range to the command.
    You can also visually select lines and run the command.
    This will use the current file and selected lines for the limit.

  -max-count=<number>                                        *:Flog-max-count*

    Passes the "--max-count=<number>" argument to "git log".

    Defaults to 5000.

  -order=<type>                                                  *:Flog-order*
  -sort=<type>                                                    *:Flog-sort*

    Sort by one of <type>, where type is in "date", "author", or "topo".

    These pass either the argument "--date-order", "--author-order", or
    "--topo-order" to "git log", respectfully.

    Defaults to "topo" when |:Flog-graph| is enabled and "date" otherwise.

  -skip=<number>                                                  *:Flog-skip*

    Passes the "--skip=<number>" argument to "git log".

  -search=<pattern>                                             *:Flog-search*
  -grep=<pattern>                                                 *:Flog-grep*

    Passes the "--grep=<pattern>" argument to "git log".

  -patch-search=<pattern>                                 *:Flog-patch-search*
  -patch-grep=<pattern>                                     *:Flog-patch-grep*

    Passes the "-G=<pattern>" argument to "git log".

  -rev=<rev>                                                       *:Flog-rev*

    A git revision to pass to "git log".
    Can be specified more than once.

    When |:Flog-limit| is specified, only the first revision is used.

  -path=<path>                                                    *:Flog-path*

    A path to pass to "git log".
    This option can be specified multiple times for multiple paths.

    When |:Flog-limit| is specified, this is not used.

  -open-cmd=<cmd>                                             *:Flog-open-cmd*

    The command to use to open the window containing the graph.
    Must give initial focus to the window.
    Defaults to |tabedit|.

  -raw-args=<args>                                            *:Flog-raw-args*

    Additional args to pass to "git log --graph".
    No args passed in using this option are guaranteed to work.
    Can be specified multiple times.

  --                                                                 *:Flog--*

    Parse the remaining arguments as if they were passed to |:Flog-raw-args|.
    Does not require escaping spaces.

:Flogsplit                                                        *:Flogsplit*

  Open the log graph in a split. Supports |<mods>|. Behaves the same as
  |:Flog| otherwise.

:Flogsetargs                                                    *:Flogsetargs*

  Update the arguments passed to |:Flog| or |:Flogsplit|. Can only be run in a
  |:Flog| window. Merges new arguments with the current arguments.

:Flogsetargs!                                                  *:Flogsetargs!*

  Same as |:Flogsetargs|, but overwrite all of the current arguments instead
  of updating them.

:Flogsplitcommit                                            *:Flogsplitcommit*

  Open a commit under the cursor using |:Gsplit| in a |flog-temp-window|. Can
  only be run in the |:Flog| window.

  Sets |flog-'!|.

:Floggit                                                            *:Floggit*

  Open a git command via |:Git| using |flog#Exec()|.

  All arguments supported by |:Git| are supported.

  Revision, file, and option completion is available for this command.

  While in the |:Flog| window, completion is available for the current line or
  range.

  By default, returns focus to the graph window after running the command.

  It updates the graph window after returning to it by default.

:Floggit!                                                          *:Floggit!*

  Same as |:Floggit|, but use |:Git!|.

:Floggit --focus                              *:Floggit_--focus* *:Floggit_-f*
:Floggit -f

  Instead of returning focus to the graph window after running the command,
  retain focus.

:Floggit --static                            *:Floggit_--static* *:Floggit_-s*
:Floggit -s

  Prevent updating the graph after running the command.


:Floggit --tmp                                  *:Floggit_--tmp* *:Floggit_-t*
:Floggit -t

  Any windows will run in a temporary |flog-side-window|.

==============================================================================
MAPPINGS                                                       *flog-mappings*

All mappings are available only from the |:Flog| window.

------------------------------------------------------------------------------
MISC. MAPPINGS                                            *flog-misc-mappings*

                                                            *<Plug>(FlogHelp)*
g?                                                                   *flog-g?*

  Show these mappings.

                                               *<Plug>(FlogVSplitCommitRight)*
<CR>                                                               *flog-<CR>*

  Open the commit under the cursor in a temporary |flog-side-window|.
  Sets |flog-'!| to the commit under the cursor.

                                           *<Plug>(FlogVSplitCommitRightPath)*
<Tab>                                                             *flog-<Tab>*

  Same as |flog-<CR>|, but use the "-path" or "-limit" argument to only show
  the diff for the currently selected paths.

                                                             *<Plug>(FlogGit)*
git                                                                 *flog-git*

  Enter in the characters ":Floggit" from normal or visual mode in order to
  quickly begin a |:Floggit| command.

                                                            *<Plug>(FlogYank)*
y<C-G>                                                           *flog-y<C-G>*

  In normal mode, copy the short commit hash under the current line to a
  register. Accepts a count.

  In visual mode, copies the selected commit hashes to a register.

                                                          *<Plug>(FlogUpdate)*
u                                                                     *flog-u*

  Update/reload the graph window.

                                                     *<Plug>(FlogCloseTmpWin)*
dq                                                                   *flog-dq*

  Close all temporary |flog-side-window|s.

                                                            *<Plug>(FlogQuit)*
gq                                                                   *flog-gq*
ZZ                                                                   *flog-ZZ*

  Quit Flog.

------------------------------------------------------------------------------
DIFF MAPPINGS                                             *flog-diff-mappings*

                                                 *<Plug>(FlogVDiffSplitRight)*
dd                                                                   *flog-dd*
dv                                                                   *flog-dv*

  In normal mode, open a diff in a temporary |flog-side-window| comparing the
  commit under the cursor with the current HEAD.

  In normal mode, also sets |flog-'!| to the commit under the cursor.

  In visual mode, open a diff in a temporary |flog-side-window| comparing the
  commits at the top and bottom of the visual selection.

                                            *<Plug>(FlogVDiffSplitPathsRight)*
dp                                                                   *flog-dp*
DD                                                                   *flog-DD*
DV                                                                   *flog-DV*

  Same as |flog-dd|, but use the "-path" or "-limit" argument to only show the
  diff for the currently selected paths.

                                       *<Plug>(FlogVDiffSplitLastCommitRight)*
d!                                                                   *flog-d!*

  Diff the commit under the cursor and the last used commit in a temporary
  |flog-side-window|.

  See also |flog-'!|.

                                  *<Plug>(FlogVDiffSplitLastCommitPathsRight)*
D!                                                                   *flog-D!*

  Same as |flog-d!|, but use the "-path" or "-limit" argument to only show the
  diff for the currently selected paths.

                                                    *<Plug>(FlogVSplitStaged)*
gs                                                                   *flog-gs*

  Show the currently staged changes.

                                                 *<Plug>(FlogVSplitUntracked)*
gu                                                                   *flog-gu*

  Show the currently untracked and unstaged changes.

                                                  *<Plug>(FlogVSplitUnstaged)*
gU                                                                   *flog-gU*

  Show the currently unstaged changes.

------------------------------------------------------------------------------
NAVIGATION MAPPINGS                                 *flog-navigation-mappings*

                                               *<Plug>(FlogJumpToCommitStart)*
^                                                                     *flog-^*

  Move the cursor to the start of the current commit branch.

  If the cursor is already on or before the commit branch, jumps to the column
  which marks the start of the commit content.

                                                      *<Plug>(FlogNextCommit)*
)                                                                     *flog-)*

  Jump to the next commit.

  Accepts a count.
  Sets |flog-''| to the last commit under the cursor.

                                                      *<Plug>(FlogPrevCommit)*
(                                                                     *flog-(*

  Same as |flog-)|, but jump backwards.

                                                *<Plug>(FlogVNextCommitRight)*
<C-N>                                                            *flog-CTRL-N*

  Jump to the next commit and open it in a temporary |flog-side-window|.

  Accepts a count.
  Sets |flog-''| to the last commit under the cursor.
  Sets |flog-'!| to the new commit under the cursor.

                                                *<Plug>(FlogVPrevCommitRight)*
<C-P>                                                            *flog-CTRL-P*

  Same as |flog-<C-N>|, but jump backwards.

                                                   *<Plug>(FlogVNextRefRight)*
]r                                                                   *flog-]r*

  Jump to the next commit with a ref name.

  Accepts a count.
  Sets |flog-''| to the last commit under the cursor.

                                                   *<Plug>(FlogVPrevRefRight)*
[r                                                                   *flog-[r*

  Same as |flog-]r|, but jump backwards.

                                                       *<Plug>(FlogSkipAhead)*
]]                                                                   *flog-]]*

  Go forward in the commit history by |:Flog-max-count| commits, if that
  option is set.

  Accepts a count.

                                                        *<Plug>(FlogSkipBack)*
[[                                                                   *flog-[[*

  Same as |flog-]]|, but go backwards.

                                                         *<Plug>(FlogSetSkip)*
gcg                                                                 *flog-gcg*

  Skip to the commit given by the count, or 0 if no count is given.

                                                          *<Plug>(FlogSetRev)*
gct                                                                 *flog-gct*

  Set |:Flog-rev| to the commit under the cursor and clear |:Flog-skip|.
  Similar to |zt|, this will set the commit to the top of the output.

                                                        *<Plug>(FlogClearRev)*
gcc                                                                 *flog-gcc*

  Unset |:Flog-rev|.

------------------------------------------------------------------------------
ARGUMENT MODIFIER MAPPINGS                            *flog-argument-mappings*

                                                       *<Plug>(FlogToggleAll)*
a                                                                     *flog-a*

  Toggle |:Flog-all|.

                                                    *<Plug>(FlogToggleBisect)*
gb                                                                   *flog-gb*

  Toggle |:Flog-bisect|.

                                                  *<Plug>(FlogToggleNoMerges)*
gm                                                                   *flog-gm*

  Toggle |:Flog-merges|.

                                                    *<Plug>(FlogToggleReflog)*
gr                                                                   *flog-gr*

  Toggle |:Flog-reflog|.

                                                   *<Plug>(FlogToggleNoGraph)*
gx                                                                   *flog-gx*

  Toggle |:Flog-graph|.

                                                   *<Plug>(FlogToggleNoPatch)*
gp                                                                   *flog-gp*

  Toggle |:Flog-patch|.

                                                          *<Plug>(FlogSearch)*
g/                                                                   *flog-g/*

  Open the command line with ":Flogsetargs -search=".
  See also |:Flog-search|.

                                                     *<Plug>(FlogPatchSearch)*
g\                                                                   *flog-g\*

  Open the command line with ":Flogsetargs -patch-search=".
  See also |:Flog-patch-search|.

                                                       *<Plug>(FlogCycleOrder)*
goo                                                                 *flog-goo*

  Cycle through the different |:Flog-order| options.
  The order of sort types can be changed with |g:flog_order_types|.

                                                        *<Plug>(FlogOrderDate)*
god                                                                 *flog-god*

  Set |:Flog-order| to "date".

                                                      *<Plug>(FlogOrderAuthor)*
goa                                                                 *flog-goa*

  Set |:Flog-order| to "author".

                                                        *<plug>(FlogOrderTopo)*
got                                                                 *flog-got*

  Set |:Flog-order| to "topo".

                                                   *<Plug>(FlogToggleReverse)*
gor                                                                 *flog-gor*

  Toggle |:Flog-reverse|.

------------------------------------------------------------------------------
COMMIT AND BRANCH MAPPINGS                              *flog-commit-mappings*

                                                           *<Plug>(FlogFixup)*
cf                                                                   *flog-cf*

  Create a "--fixup" commit for the commit under the cursor.
  See also "git commit --help".

                                                     *<Plug>(FlogFixupRebase)*
cF                                                                   *flog-cF*

  Same as |flog-cf|, but immediately perform a "rebase --autosquash".
  See also "git rebase --help".

                                                          *<Plug>(FlogSquash)*
cs                                                                   *flog-cs*

  Create a "--squash" commit for the commit under the cursor.
  See also "git commit --help".

                                                    *<Plug>(FlogSquashRebase)*
cS                                                                   *flog-cS*

  Same as |flog-cs|, but immediately perform a "rebase --autosquash".
  See also "git rebase --help".

                                                      *<Plug>(FlogSquashEdit)*

cA                                                                   *flog-cA*

  Same as |flog-cs|, but edit the commit message.

                                                          *<Plug>(FlogRevert)*
crc                                                                 *flog-crc*

  Revert the commit under the cursor. In visual mode, revert all selected
  commits.

                                                    *<Plug>(FlogRevertNoEdit)*
crn                                                                 *flog-crn*

  Same as |flog-crc|, but use the "--no-edit" flag.
  See also "git rebase --help".

                                                        *<Plug>(FlogCheckout)*
coo                                                                 *flog-coo*

  Checkout the commit under the cursor.

                                                  *<Plug>(FlogCheckoutBranch)*
cob                                                                 *flog-cob*

  Checkout the first branch name under the cursor, prioritizing local
  branches.

                                             *<Plug>(FlogCheckoutLocalBranch)*
col                                                                 *flog-col*

  Checkout the first local branch name under the cursor, or checkout the first
  remote branch with the remote name trimmed from the ref.

  This will cause remote branches to be tracked locally if they are not
  already.

                                                       *<Plug>(FlogGitCommit)*
c<Space>                                                       *flog-c<Space>*

  Start a command line with ":Floggit commit ".
  See also |:Floggit|.

                                                       *<Plug>(FlogGitRevert)*
cr<Space>                                                     *flog-cr<space>*

  Start a command line with ":Floggit revert ".
  See also |:Floggit|.

                                                        *<Plug>(FlogGitMerge)*
cm<Space>                                                     *flog-cm<space>*

  Start a command line with ":Floggit merge ".
  See also |:Floggit|.

                                                     *<Plug>(FlogGitCheckout)*
co<Space>                                                     *flog-co<Space>*

  Start a command line with ":Floggit checkout ".
  See also |:Floggit|.

                                                       *<Plug>(FlogGitBranch)*
cb<Space>                                                     *flog-cb<Space>*

  Start a command line with ":Floggit branch ".
  See also |:Floggit|.

------------------------------------------------------------------------------
COMMIT MARK MAPPINGS                                      *flog-mark-mappings*


                                                   *<Plug>(FlogSetCommitMark)*
m{a-zA-Z'}                                                            *flog-m*

  Mark the current commit under the cursor.
  See also |flog-commit-marks|.

                                                *<Plug>(FlogJumpToCommitMark)*
'{a-zA-Z'}                                                            *flog-'*

  Jump to the marked commit.
  Sets |flog-''| to the last commit under the cursor.

  See also |flog-commit-marks|.

------------------------------------------------------------------------------
REBASE MAPPINGS                                         *flog-rebase-mappings*

                                               *<Plug>(FlogRebaseInteractive)*
ri                                                                   *flog-ri*

  Start an interactive rebase using the root of the commit under the cursor,
  if it is available.

  See also "git rebase --help".

                                     *<Plug>(FlogRebaseInteractiveAutosquash)*
rf                                                                   *flog-rf*

  Perform an autosquash rebase without editing the TODO list.
  See also "git rebase --help".


                                       *<Plug>(FlogRebaseInteractiveUpstream)*
ru                                                                   *flog-ru*

  Perform an interactive rebase against "@{upstream}".
  See also "git rebase --help".

                                           *<Plug>(FlogRebaseInteractivePush)*
rp                                                                   *flog-rp*

  Perform an interactive rebase against "@{push}".
  See also "git rebase --help".

                                                  *<Plug>(FlogRebaseContinue)*
rr                                                                   *flog-rr*

  Run "git rebase --continue".
  See also "git rebase --help".

                                                      *<Plug>(FlogRebaseSkip)*
rs                                                                   *flog-rs*

  Run "git rebase --skip".
  See also "git rebase --help".

                                                     *<Plug>(FlogRebaseAbort)*
ra                                                                   *flog-ra*

  Run "git rebase --abort".
  See also "git rebase --help".

                                                  *<Plug>(FlogRebaseEditTodo)*
re                                                                   *flog-re*

  Run "git rebase --edit-todo".
  See also "git rebase --help".

                                         *<Plug>(FlogRebaseInteractiveReword)*
rw                                                                   *flog-rw*

  Start an interactive rebase with the commit under the cursor set to
  "reword".

  See also "git rebase --help".

                                           *<Plug>(FlogRebaseInteractiveEdit)*
rm                                                                   *flog-rm*

  Start an interactive rebase with the commit under the cursor set to "edit".
  See also "git rebase --help".

                                           *<Plug>(FlogRebaseInteractiveDrop)*
rd                                                                   *flog-rd*

  Start an interactive rebase with the commit under the cursor set to "drop".
  See also "git rebase --help".

                                                       *<Plug>(FlogGitRebase)*
r<Space>                                                       *flog-r<Space>*

  Start a command line with ":Floggit rebase ".

  See also |:Floggit|.
  See also "git rebase --help".

==============================================================================
SETTINGS                                                       *flog-settings*

g:flog_default_opts                                      *g:flog_default_opts*

  A |dict| containing the default values for arguments to |:Flog|.

  Keys in the dictionary use underscores instead of dashes.

  For example, the option for |:Flog-max-count| is "max_count", not
  "max-count".

  Boolean args are always positive.

  For example, the option for |:Flog-merges| is "merges", not "no_merges".

  Example:
>
  let g:flog_default_opts = { 'max_count': 2000, 'all': v:true }
<

g:flog_permanent_default_opts                  *g:flog_permanent_default_opts*

  Similar to |g:flog_default_opts|, but the arguments are used as internal
  defaults when clearing arguments using |:Flogsetargs| or |:Flogsetargs!|.

  Has lower presidence than |g:flog_default_arguments|.

g:flog_write_commit_graph                          *g:flog_write_commit_graph*

  When true, the first time |:Flog| is run for a repo, will run
  "git commit-graph write" in order to speed up subsequent calls.

  The arguments are controlled via |g:flog_write_commit_graph_args|.

  Defaults to true.

g:flog_write_commit_graph_args                *g:flog_write_commit_graph_args*

  The arguments to pass to "git commit-graph write" when
  |g:flog_write_commit_graph| is enabled.

  Defaults to "--reachable --progress".

  See also "git commit-graph --help".

g:flog_check_lua_version                            *g:flog_check_lua_version*

  When enabled, check that the installed version of Lua is supported.

  Defaults to true.

g:flog_lua_bin                                                *g:flog_lua_bin*

  The Lua interpretter to use when |g:flog_use_internal_lua| is disabled.

  Defaults to "luajit".

g:flog_use_internal_lua                              *g:flog_use_internal_lua*

  When enabled, use the version of Lua included with Vim rather than calling
  Lua directly.

  In most cases, this requires compiling Vim with:
>
  ./configure \
    ...
    --enable-luainterp=dynamic \
    --with-luajit
<

  See |install| for information on compiling Vim.
  See also "./configure --help".

  Defaults to false.

g:flog_get_author_args                                *g:flog_get_author_args*

  The arguments to use when completing authors with "git shortlog".

  Defaults to "--all --no-merges --max-count=100000".

  See also "git shortlog --help".

g:flog_commit_start_token                          *g:flog_commit_start_token*

  The internal token to use to find commit start. Provided as an option in
  case your commit messages contain the default token alone on a line.

  Defaults to "__START".

g:flog_order_types                                        *g:flog_order_types*

  An array of dicts describing the different order types.

  Can be set to change the order of order options with |flog-goo|.

  Defaults to:
>
  [
    \ { name: 'date', args: '--date-order' },
    \ { name: 'author', args: '--author-date-order' },
    \ { name: 'topo', args: '--topo-order' },
    \ ]
<

==============================================================================
FUNCTIONS                                                     *flog-functions*

                                                                 *flog#Exec()*
flog#Exec({command}[, {focus}[, {static}[, {tmp}]]])

  Runs {command}.

  Any window opened by the command will be considered a |flog-side-window|.

  By default, focus returns to the graph window after running the command.
  {focus} allows the command to retain focus.

  {static} causes the graph not to update after running the command.

  {tmp} causes any windows to run in a temporary |flog-side-window|.

  Example:
>
    flog#Exec('Git fetch')
<

                                                             *flog#ExecTmp()*
flog#ExecTmp({command}[, {focus}[, {static}]])

  Same as |flog#Exec()|, but always open the command in a temporary
  |flog-side-window|.

                                                              *flog#Format()*
flog#Format({command})

  Format a command according to |flog-command-format|.

  Example:
>
    flog#Format('Git show %h')
<

==============================================================================
AUTOCOMMANDS                                               *flog-autocommands*

                                                             *User_FlogUpdate*
FlogUpdate                On updating a |:Flog| window.

                                                       *User_FlogSideWinSetup*
FlogSideWinSetup          On initializing any |flog-side-window|.

                                                  *User_FlogTmpSideWinSetup*
FlogTmpSideWinSetup       On initializing a temporary |flog-side-window|.
                          Called after |User_FlogSideWinSetup|.

                                               *User_FlogNonTmpSideWinSetup*
FlogNonTmpSideWinSetup    On initializing a non-temporary |flog-side-window|.
                          Called after |User_FlogSideWinSetup|.

==============================================================================
ABOUT                                                             *flog-about*

------------------------------------------------------------------------------
SIDE WINDOWS                                                *flog-side-window*

  Flog can open windows beside the graph to show more commit info.

  Side windows are opened with |flog#Exec()|.

  These windows can be set to temporary. Temporary windows will close when
  other temporary windows are opened. Temporary windows close when Flog
  closes.

------------------------------------------------------------------------------
COMMIT MARKS                                               *flog-commit-marks*

  Flog allows marking commits. Marked commits persist even when the graph
  buffer updates.

  Marked commits can be referenced using |flog-command-format|. Marked commits
  can be created with |flog-m|. A commit mark can be jumped to with |flog-'|.

  The following special commit marks exist.

                                                                     *flog-''*
  ''                    The last commit before jumping to another commit.
                        This mark is set by various commands and mappings.

                                                                     *flog-'<*
  '<                    The start of the visual selection.

                                                                     *flog-'>*
  '>                    The end of the visual selection.

                                                                     *flog-'@*
  '@                    The current HEAD.

                                                           *flog-'~* *flog-'^*
  '~ '^                 The parent of the current HEAD.

                                                                     *flog-'!*
  '!                    The commit last used in a command with |flog-%h|.
                        This mark is set by various commands and mappings.
                        Can be thought of as the "last used commit".

------------------------------------------------------------------------------
COMMAND FORMAT                                           *flog-command-format*

  When running commands with |flog#Format()|, a special syntax similar to
  |printf| is used to transform the command string.

  Items prefixed by the "%" character are resolved into commit information and
  Flog options.

  If any items cannot be resolved, such as if the graph buffer is empty or the
  item uses an option like "-path" that was not set, commands will not be run.

  The following items are supported:

                                                                     *flog-%%*
  %%                    A literal "%" character.

                                                                     *flog-%h*
  %h                    The hash of the commit under the cursor, if any.
                        Using this in a command sets |flog-'!| to the commit.

                                                                     *flog-%H*
  %H                    Same as %h, but do not set |flog-'!|.

                                                      *flog-%(h'* *flog-%(h')*
  %(h'x)                The hash at the given commit mark "x".
                        See also |flog-commit-marks|.

                                                                     *flog-%b*
  %b                    The first branch of the commit under the cursor, if
                        any. Local branches prioritized first. Useful for
                        checking out branches.

                                                      *flog-%(b'* *flog-%(b')*
  %(b'x)                The branch at the given commit mark "x".

                                                                     *flog-%l*
  %l                    The first branch of the commit under the cursor, if
                        any. Local branches prioritized first. If a remote
                        commit is used, trim the remote name from the branch.
                        Useful for checking out commits for tracking.

                                                      *flog-%(l'* *flog-%(l')*
  %(l'x)                The local branch at the given mark "x".

                                                                     *flog-%p*
  %p                    If |:Flog-limit| is set, resolves to the path passed
                        to the limit, escaping it.

                        Otherwise, resolves to the paths passed to
                        |:Flog-path|, if any, escaping them and joining them
                        with spaces.

                                                                     *flog-%t*
  %t                    A tree for the current index. When this is used, a new
                        tree will be created for the current index using
                        "git write-tree" before the command is run. This is
                        useful for diffing unstaged files with "git add -N".

 vim:tw=78:ts=8:ft=help
